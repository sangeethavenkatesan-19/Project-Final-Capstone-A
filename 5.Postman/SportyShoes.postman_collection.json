{
	"info": {
		"_postman_id": "5eb25492-bbff-4d75-a416-7f1fae60ca3c",
		"name": "SportyShoes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32331791"
	},
	"item": [
		{
			"name": "Get_All_Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"pm.test('Response time is less than 1500ms', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"})\r",
							"pm.test('Response value check with valid data', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.code).to.eql(101);\r",
							"    pm.expect(jsonData.message).to.eql('3 Users Fetched Successfully.');\r",
							"})\r",
							"pm.test('Response value check with dynamic data', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.users[0]).to.have.property('name');\r",
							"    pm.expect(jsonData.users[0]).to.have.property('email');\r",
							"    pm.expect(jsonData.users[0]).to.have.property('password');\r",
							"});\r",
							"pm.test('Response value check with dynamic data is not not and not undefined', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.users[0].name).to.not.be.null;\r",
							"    pm.expect(jsonData.users[0].name).to.not.be.undefined;\r",
							"    pm.expect(jsonData.users[0].email).to.not.be.null;\r",
							"    pm.expect(jsonData.users[0].email).to.not.be.undefined;\r",
							"    pm.expect(jsonData.users[0].password).to.not.be.null;\r",
							"    pm.expect(jsonData.users[0].password).to.not.be.undefined;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9010/get-users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9010",
					"path": [
						"get-users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_All_Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"pm.test('Response time is less than 1500ms', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"})\r",
							"pm.test('Response value check with valid data', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.code).to.eql(101);\r",
							"    pm.expect(jsonData.message).to.eql('12 Shoes Fetched Successfully.');\r",
							"})\r",
							"pm.test('Response value check with dynamic data', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.shoes[0]).to.have.property('id');\r",
							"    pm.expect(jsonData.shoes[0]).to.have.property('image');\r",
							"    pm.expect(jsonData.shoes[0]).to.have.property('name');\r",
							"    pm.expect(jsonData.shoes[0]).to.have.property('category');\r",
							"    pm.expect(jsonData.shoes[0]).to.have.property('sizes');\r",
							"    pm.expect(jsonData.shoes[0]).to.have.property('price');\r",
							"});\r",
							"pm.test('Response value check with dynamic data is not not and not undefined', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.shoes[0].id).to.not.be.null;\r",
							"    pm.expect(jsonData.shoes[0].id).to.not.be.undefined;\r",
							"    pm.expect(jsonData.shoes[0].image).to.not.be.null;\r",
							"    pm.expect(jsonData.shoes[0].image).to.not.be.undefined;\r",
							"    pm.expect(jsonData.shoes[0].name).to.not.be.null;\r",
							"    pm.expect(jsonData.shoes[0].name).to.not.be.undefined; \r",
							"    pm.expect(jsonData.shoes[0].category).to.not.be.null;\r",
							"    pm.expect(jsonData.shoes[0].category).to.not.be.undefined;\r",
							"    pm.expect(jsonData.shoes[0].sizes).to.not.be.null;\r",
							"    pm.expect(jsonData.shoes[0].sizes).to.not.be.undefined;\r",
							"    pm.expect(jsonData.shoes[0].price).to.not.be.null;\r",
							"    pm.expect(jsonData.shoes[0].price).to.not.be.undefined;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9010/get-shoes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9010",
					"path": [
						"get-shoes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 400', function () {\r",
							"    pm.response.to.have.status(400);\r",
							"})\r",
							"\r",
							"pm.test('Response time is less than 1500ms', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"})\r",
							"\r",
							"pm.test('Response value check with dynamic data', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('timestamp');\r",
							"    pm.expect(jsonData).to.have.property('status');\r",
							"    pm.expect(jsonData).to.have.property('error');\r",
							"    pm.expect(jsonData).to.have.property('path');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 101,\r\n  \"name\": \"Crocs Shoe Name\",\r\n  \"category\": \"Casual Wear\",\r\n  \"sizes\": \"8,9,10\",\r\n  \"price\": 1500,\r\n  \"image\": \"www.imge123.com\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9010/update-shoe",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9010",
					"path": [
						"update-shoe"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add_Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('Response time is less than 1500ms', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"})\r",
							"\r",
							"pm.test('Response value check with valid data', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.code).to.eql(101);\r",
							"    pm.expect(jsonData.message).to.eql('SampleShoe Added Successfully.');\r",
							"})\r",
							"\r",
							"pm.test('Response value check with dynamic data', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.shoe).to.have.property('id');\r",
							"    pm.expect(jsonData.shoe).to.have.property('image');\r",
							"    pm.expect(jsonData.shoe).to.have.property('name');\r",
							"    pm.expect(jsonData.shoe).to.have.property('category');\r",
							"    pm.expect(jsonData.shoe).to.have.property('sizes');\r",
							"    pm.expect(jsonData.shoe).to.have.property('price');\r",
							"});\r",
							"\r",
							"pm.test('Response value check with dynamic data is not not and not undefined', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.shoe.id).to.not.be.null;\r",
							"    pm.expect(jsonData.shoe.id).to.not.be.undefined;\r",
							"    pm.expect(jsonData.shoe.image).to.not.be.null;\r",
							"    pm.expect(jsonData.shoe.image).to.not.be.undefined;\r",
							"    pm.expect(jsonData.shoe.name).to.not.be.null;\r",
							"    pm.expect(jsonData.shoe.name).to.not.be.undefined; \r",
							"    pm.expect(jsonData.shoe.category).to.not.be.null;\r",
							"    pm.expect(jsonData.shoe.category).to.not.be.undefined;\r",
							"    pm.expect(jsonData.shoe.sizes).to.not.be.null;\r",
							"    pm.expect(jsonData.shoe.sizes).to.not.be.undefined;\r",
							"    pm.expect(jsonData.shoe.price).to.not.be.null;\r",
							"    pm.expect(jsonData.shoe.price).to.not.be.undefined;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:9010/add-shoe?id=101&image=image_url&name=SampleShoe&category=Running&sizes=9&price=1000",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9010",
					"path": [
						"add-shoe"
					],
					"query": [
						{
							"key": "id",
							"value": "101"
						},
						{
							"key": "image",
							"value": "image_url"
						},
						{
							"key": "name",
							"value": "SampleShoe"
						},
						{
							"key": "category",
							"value": "Running"
						},
						{
							"key": "sizes",
							"value": "9"
						},
						{
							"key": "price",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete_Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('Response time is less than 2000ms', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"})\r",
							"\r",
							"pm.test('Response value check with valid data', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.code).to.eql(101);\r",
							"    pm.expect(jsonData.message).to.eql('Shoe with ID 101 Deleted Successfully.');\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:9010/delete-shoe?id=101",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9010",
					"path": [
						"delete-shoe"
					],
					"query": [
						{
							"key": "id",
							"value": "101"
						}
					]
				}
			},
			"response": []
		}
	]
}